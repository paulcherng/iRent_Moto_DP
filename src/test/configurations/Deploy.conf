// This is a sample of the com.tibco.ep.streambase.configuration.sbengine.EventFlowDeployment configuration containing
// all possible properties. The contents as presented are not valid; uncomment and replace sample values with valid
// values as needed.

name = "sample-EventFlowDeployment-document"
type = "com.tibco.ep.streambase.configuration.sbengine"
version = "1.0.0"
configuration = {

	// An EventFlow deployment configuration object contains modules and container connections that can be set
	// independently of the rest of an EventFlow engine's configuration.
	EventFlowDeployment = {

		// Configuration types that have affinity with particular engines can use this array to associate themselves with
		// particular engines. Each element is an engine name or a regular expression matching zero or more engine names. A
		// null value means that the instance uses default engine association. Use of this property is recommended only when
		// manually loading configurations via the node management command line tool or API; affinity for configurations in
		// fragment archives is automatically defaulted during node installation. This key is optional and has no default
		// value.
		//associatedWithEngines = [ "default-engine-for-com.example.POC_DC_integrate" ]

		// A group of container connections used by modules in this engine.
		//containerConnections = [ 

			// A container connection describes a means for connecting streams in different EventFlow application modules running
			// in different containers.
			//{

				// Description of the entity (usually an input stream) that will consume the output of the connected source
				// container. This key is required.
				//destination = "sample.in"

				// A predicate expression filter to limit the tuples that cross to the destination container. The expression to
				// enter must resolve to true or false, and should match against one or more fields in the schema of the
				// connection's stream. This key is optional and has no default value.
				//filter = "samplefieldname = 'samplefield'"

				// description of the entity in another named container (usually an output stream) that will send the data to the
				// destination container. This key is required.
				//source = "sample.out"

				// By default, connections between containers are set up to run asynchronously, with a queue to manage the flow of
				// tuples through the connection. EventFlow engines also support synchronous container connections, which are low
				// latency, direct connections between containers, and do not have queue management. This key is optional and its
				// default value is 'ASYNCHRONOUS'
				//synchronicity = "ASYNCHRONOUS"
			//}
		//]

		// A list of modules to load into named containers. This key is optional and has no default value.
		modules = [ 

			// Description of a module to load into a named container.
			{

				// The name you assign to the container to hold the specified module. For running or debugging in Studio, the
				// top-level module must be in a container named 'default'. This key is required.
				containerName = "iisigroup_digisight"

				// One of 'ENABLED', 'DISABLED', or 'DROP_TUPLES' to specify the startup state of dequeuing for this container. If
				// you specify 'DISABLED', then dequeue attempts are actively refused and exceptions are thrown. If you specify
				// 'DROP_TUPLES', then tuples are silently dropped. This key is optional and its default value is 'ENABLED'.
				dequeue = "ENABLED"

				// One of 'ENABLED', 'DISABLED', or 'DROP_TUPLES' to specify the startup state of enqueuing for this container. If
				// you specify 'DISABLED', then enqueue attempts are actively refused and exceptions are thrown. If you specify
				// 'DROP_TUPLES', then tuples are silently dropped. This key is optional and its default value is 'ENABLED'.
				enqueue = "ENABLED"

				// An associative array of extension point target IDs and their contents. This key is optional and has no default
				// value.
				//extensionPoints = {

					// A module extension point description. Extension point names containing dots must be surrounded with double
					// quotes.
					//sampleExtensionPoint0 = {

						// An associative array of extension names, whose values are extension descriptions. This key is optional and has
						// no default value.
						//extensions = {

							// An extension specifies modules that implement the interface in an extension point operator for this module.
							// Extension names containing dots must be surrounded with double quotes.
							//sampleExtension0 = {

								// An EventFlow module reference for a module that implements the interface in the enclosing extension point
								// operator. This key is required.
								//moduleName = "com.example.sampleModuleName"

								// An associative array of module parameters used by this extension. Any parameter value beginning with '#!' has
								// been encrypted with the epadmin encrypt-secret command. This key is optional and has no default value.
								//moduleParameters = {

									// A parameter name/value binding. Parameter names containing dots must be surrounded with double quotes.
									//sampleModuleParameterName0 = "sampleModuleParameterValue"
								//}
							//}
						//}
					//}
				//}

				// An EventFlow module reference. This key is required.
				moduleName = "EntryPoint.iRent_DP_Entry.sbapp"

				// A set of one or more parameters to be passed to the top-level module in the current container. Any parameter
				// value beginning with '#!' has been encrypted with the epadmin encrypt-secret command. This key is optional and
				// has no default value.
				moduleParameters = {

					// A parameter name/value binding. Parameter names containing dots must be surrounded with double quotes.
					Broker="${BROKER}"
				}

				// Set this value to true to specify that the module in this container should start up suspended. Set it to false to
				// have the module start running when the container is added. This key is optional and its default value is false.
				//suspend = false

				// Configures runtime tracing for this module. This key is optional and has no default value.
				//trace = [ 

					// Configures runtime tracing for an EventFlow module.
					//{

						// If true, the trace system buffers trace output before writing to a file. If false, the output trace file is
						// flushed on every trace line. This key is optional and its default value is true.
						//buffered = true

						// If true, the trace system compresses its files using gzip. If false, files remain uncompressed. This key is
						// optional and its default value is false.
						//compress = false

						// Absolute base file name for trace files. This key is optional and has no default value. If this key is absent,
						// trace output is written to the console.
						//fileBase = "c:\a\sample\fie\base"

						// A regular expression pattern that limits tracing to the operators and streams whose name matches the pattern.
						// This key is optional and has no default value.
						//matchOperatorAndStreamRegexp = "default.stream[0-9]"

						// If true, all trace files are overwritten on engine restart. If false, trace files are appended to on engine
						// restart. This key is optional and its default value is false.
						//overwrite = false
					//}
				//]
			}
		]
	}
}
