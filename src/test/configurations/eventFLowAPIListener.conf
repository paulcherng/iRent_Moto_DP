// This is a sample of the com.tibco.ep.streambase.configuration.sbclientapilistener.ClientAPIListener configuration
// containing all possible properties. The contents as presented are not valid; uncomment and replace sample values with
// valid values as needed.

name = "sample-ClientAPIListener-document"
type = "com.tibco.ep.streambase.configuration.sbclientapilistener"
version = "1.0.0"
configuration = {

	// EventFlow client API listener configuration.
	ClientAPIListener = {

		// Listener address configuration for the EventFlow client API. This key is optional and if it is not present,
		// defaults are set according to the defaults of the contained types.
		apiListenerAddress = {

			// TCP port for the EventFlow engine's client API to listen on. This key is optional and its default value is 10000.
			// A zero value means that the server will find a random port to listen on.
			portNumber = 0
		}

		// Configuration types that have affinity with particular engines can use this array to associate themselves with
		// particular engines. Each element is an engine name or a regular expression matching zero or more engine names. A
		// null value means that the instance uses default engine association. Use of this property is recommended only when
		// manually loading configurations via the node management command line tool or API; affinity for configurations in
		// fragment archives is automatically defaulted during node installation. This key is optional and has no default
		// value.
		//associatedWithEngines = [ "sample-engine-identifier" ]

		// Name of an authentication realm to use when authenticating API requests. This key is optional and has no default
		// value. If not present, the listener will not authenticate API requests from its clients.
		//authenticationRealmName = "sample-authentication-realm"

		// The heartbeat interval is the number of milliseconds between heartbeat packets sent to clients. Clients can be
		// configured to require a heartbeat packet from the engine at a minimum interval. This is used primarily for network
		// segmentation detection. Setting the client heartbeat interval to zero will disable heartbeats from the engine.
		// Clients connected to such an engine will not have heartbeat protection, regardless of their locally configured
		// minimum heartbeat interval. This key is optional and its default value is 10000.
		//clientHeartbeatIntervalMilliseconds = 10000

		// engines with many clients may want to increase the maximum number of back logged connections to the engine. For
		// further details lookup the manual page for the system call 'listen'. This key is optional and its default value is
		// 10.
		//connectionBacklog = 10

		// How often should the server check for idle clients. The value is in milliseconds. This key is optional and its
		// default value is 60000.
		//idleClientCheckIntervalMilliseconds = 60000

		// Settings for disconnecting idle clients. An idle dequeue client is a client who has subscribed to at least one
		// stream (at any point) and has been idle for idle-dequeue-client-timeout-ms. The server checks clients every
		// idleClientCheckIntervalMilliseconds milliseconds. The actual point that a client is disconnected will be
		// approximate modulo idleClientCheckIntervalMilliseconds. Values are in milliseconds. Values greater than zero turn
		// this feature on. This key is optional and its default value is -1, which turns off checking.
		//idleDequeueClientTimeoutMilliseconds = -1

		// Settings for disconnecting idle enqueue clients. An idle enqueue client is a client who has enqueued at least 1
		// tuple and has been idle for idleEnqueueClientTimeoutMilliseconds milliseconds. The engine checks clients every
		// idleClientCheckIntervalMilliseconds milliseconds. The actual point that a client is disconnected will be
		// approximate modulo idleClientCheckIntervalMilliseconds. Values are in milliseconds. Values greater than zero turn
		// this feature on. This key is optional and its default value is -1, which turns off checking.
		//idleEnqueueClientTimeoutMilliseconds = -1

		// Maximum number of persistent connections. Each persistent connection uses up engine resources. To protect the
		// engine from errant client connections a user can specify a maximum number of persistent connections. Any attempted
		// client connections over the limit will be disconnected. This key is optional and its default value is -1, meaning
		// no limit
		//maxPersistentConnections = -1

		// Page pool configuration. This key is optional and if it is not present, defaults are set according to the defaults
		// of the contained types.
		//pagePool = {

			// This setting controls the maximum number of pages that a dequeuing client connection can allocate. Depending on
			// the value of slowDequeueClientWaitMilliseconds the engine will either disconnect the slow client or BLOCK. This
			// setting is to protect the EventFlow engine from slow or hung dequeuing clients. With the default page size of 4096
			// bytes, the default maxClientPages value of 2048 will provide 8 megabytes. To allow ALL DEQUEUING CLIENTS to
			// allocate unlimited memory in sbd, set the value to 0. Note that the number of pages that a client allocates will
			// change over time. A client that is consuming tuples as fast as the engine produces them will only use 1 or 2
			// pages. The max can be reached with a slow/hung client or if there is a large spike of output data. You can use
			// HOCON power-of-ten or power-of-two suffixes like kB, MB, K, or M as an abbreviation. This key is optional and its
			// default value is 4096.
			//maxClientPages = 4096

			// maxPooledBuffers is used to determine how many buffers (per output stream) to maintain in a buffer cache. To turn
			// off the cache set the value to -1. Note: this param does not effect when/if slow clients are disconnected. You can
			// use HOCON power-of-ten or power-of-two suffixes like kB, MB, K, or M as an abbreviation. This key is optional and
			// its default value is 1024.
			//maxPooledBuffers = 1024

			// pageSize is used to determine the initial size for output buffers. It is also used to calculate the maximum size a
			// client output queue can grow to before the client is disconnected, see maxClientPages. This key is optional and
			// its default value is 4096. You can use HOCON power-of-ten or power-of-two suffixes like kB, MB, K, or M as an
			// abbreviation.
			//pageSize = 4096

			// This setting is used to determine the behavior of slow dequeuing clients. The engine will either disconnect slow
			// clients (the default) or BLOCK the engine to wait for slow clients to catch up. A value of -1 will cause clients
			// to be disconnected. A value greater than -1 will cause the engine to sleep for the given amount of time in
			// milliseconds when it detects that a client is running behind. The engine will continue sleeping until there is
			// available dequeuing space for the client. This key is optional and its default value is -1
			//slowDequeueClientWaitMilliseconds = -1
		//}

		// Name of a secure communication server profile to use when configuring secure communication for a listener. This key
		// is optional and has no default value. If not present, the listener will not use secure connections with its
		// clients.
		//secureCommunicationProfileName = "sample-secure-profile"
	}
}
