<?xml version="1.0" encoding="UTF-8"?>
<adapter-configurations>
	<adapter-configuration name="webstreams">
		<section name="webstreams">
			<setting name="Enabled" val="true" />
			<setting name="Port" val="10091" />
			<setting name="IdleTimeoutMS" val="0" />
			<setting name="OutputBufferSize" val="32768" />
			<setting name="RequestHeaderSize" val="8192" />
			<setting name="ResponseHeaderSize" val="8192" />
			<setting name="SendServerVersion" val="true" />
			<setting name="SendDateHeader" val="false" />
			<setting name="SelectorThreads" val="-1" />
			<setting name="AcceptorThreads" val="-1" />
			<setting name="ReuseAddress" val="true" />
			<setting name="LingerTime" val="-1" />
			<setting name="GZipMimeTypes"
				val="text/html,
        text/plain,text/xml,application/xhtml+xml,text/css,
        application/javascript,text/javascript,image/svg+xml" />
			<setting name="WebSocketAsyncWriteTimeoutMS" val="0" />
			<setting name="WebSocketIdleTimeoutMS" val="0" />
			<setting name="SecurePort" val="10443" />
		</section>
	</adapter-configuration>
	<adapter-configuration name="webservers">
		<section name="webserver">
			<setting name="id" val="Web Server Port 10100" />
			<setting name="Port" val="10100" />
			<setting name="StartOnStartup" val="true" />
			<setting name="IdleTimeoutMS" val="30000" />
			<setting name="OutputBufferSize" val="32768" />
			<setting name="RequestHeaderSize" val="8192" />
			<setting name="ResponseHeaderSize" val="8192" />
			<setting name="SendServerVersion" val="true" />
			<setting name="SendDateHeader" val="false" />
			<setting name="GZipMimeTypes"
				val="text/html,text/plain,text/xml,application/xhtml+xml,text/css,application/javascript,text/javascript,image/svg+xml" />
			<setting name="WebSocketAsyncWriteTimeoutMS" val="5000" />
			<setting name="WebSocketIdleTimeoutMS" val="30000" />
		</section>
	</adapter-configuration>
	<adapter-configuration
		name="mqttclientconnections">
		<section name="mqttclientconnection">
			<setting name="id" val="localTest" />

			<!-- Determines if this connection is created on startup or during the 
				first usage. -->
			<setting name="connectOnStartup" val="true" />

			<!-- If true then the user must explicitly ACK each message using the 
				MQTTClientAck adapter. If false an ACK will automatically be sent went the 
				message is received off the wire. -->
			<setting name="manualAcks" val="false" />

			<!-- Comma separated list of URIs, If the port is not specified, it will 
				default to 1883 for tcp://" URIs, and 8883 for ssl:// URIs -->
			<setting name="URIs" val="tcp://192.168.61.12:1883" />

			<!-- isCleanSession: -If set to false both the client and server will 
				maintain state across restarts of the client, the server and the connection. 
				As state is maintained: ◦Message delivery will be reliable meeting the specified 
				QOS even if the client, server or connection are restarted. ◦ The server 
				will treat a subscription as durable. -If set to true the client and server 
				will not maintain state across restarts of the client, the server or the 
				connection. This means ◦Message delivery to the specified QOS cannot be maintained 
				if the client, server or connection are restarted ◦The server will treat 
				a subscription as non-durable -->
			<!-- <setting name="isCleanSession" val="true" /> -->

			<!-- The max inflight limits to how many messages we can send without 
				receiving acknowledgments. If this value is missing the default is used -->
			<setting name="maxInFlight" val="10" />

			<!-- Returns whether the client will automatically attempt to reconnect 
				to the server if the connection is lost -->
			<setting name="automaticReconnect" val="true" />

			<!-- The client identifier to use when creating a connection to the broker. 
				If this value is blank an identifier will be generated. -->
			<setting name="ClientId" val="" />

			<!-- The persistence class to use to store in-flight message. The values 
				are 'memory' or 'file'. -->
			<setting name="PersistenceType" val="memory" />

			<!-- The full path to use for file persistence. If this option is blank 
				or missing the system will use System.getProperty("user.dir") as the location 
				to store a temporary file -->
			<setting name="PersistencePath" val="/" />

			<!-- Sets the user name to use for the connection. -->
			<setting name="Username" val="" />

			<!-- Sets the password to use for the connection. -->
			<setting name="Password" val="" />

			<!-- Sets the connection timeout value. This value, measured in seconds, 
				defines the maximum time interval the client will wait for the network connection 
				to the MQTT server to be established. The default timeout is 30 seconds. 
				A value of 0 disables timeout processing meaning the client will wait until 
				the network connection is made successfully or fails. -->
			<setting name="connectionTimeout" val="30" />

			<!-- Sets the "keep alive" interval. This value, measured in seconds, 
				defines the maximum time interval between messages sent or received. It enables 
				the client to detect if the server is no longer available, without having 
				to wait for the TCP/IP timeout. The client will ensure that at least one 
				message travels across the network within each keep alive period. In the 
				absence of a data-related message during the time period, the client sends 
				a very small "ping" message, which the server will acknowledge. A value of 
				0 disables keepalive processing in the client. The default value is 60 seconds -->
			<setting name="keepAliveInterval" val="60" />

			<!-- Sets the "Last Will and Testament" (LWT) for the connection. In the 
				event that this client unexpectedly loses its connection to the server, the 
				server will publish a message to itself using the supplied details. -->

			<!-- The topic to publish the will to -->
			<setting name="willTopic" val="testTopic" />

			<!-- The payload for the message to send to the will topic to -->
			<setting name="willPayload" val="" />

			<!-- The quality of service to publish the will message at (0, 1 or 2). -->
			<setting name="willQos" val="" />

			<!-- Whether or not the will message should be retained -->
			<setting name="willRetained" val="" />

			<!-- Sets the SSL properties for the connection. Note that these properties 
				are only valid if an implementation of the Java Secure Socket Extensions 
				(JSSE) is available. -->

			<!-- One of: SSL, SSLv3, TLS, TLSv1, SSL_TLS -->
			<setting name="sslProtocol" val="" />

			<!-- Underlying JSSE provider. For example "IBMJSSE2" or "SunJSSE" -->
			<setting name="sslContextProvider" val="" />

			<!-- The name of the file that contains the KeyStore object that you want 
				the KeyManager to use. -->
			<setting name="sslKeyStore" val="" />

			<!-- The password for the KeyStore object that you want the KeyManager 
				to use -->
			<setting name="sslKeyStorePassword" val="" />

			<!-- for example "PKCS12", "JKS", or "JCEKS" -->
			<setting name="sslKeyStoreType" val="" />

			<!-- for example "IBMJCE" or "IBMJCEFIPS" -->
			<setting name="sslKeyStoreProvider" val="" />

			<!-- The name of the file that contains the KeyStore object that you want 
				the TrustManager to use. -->
			<setting name="sslTrustStore" val="" />

			<!-- The password for the TrustStore object that you want the TrustManager 
				to use. -->
			<setting name="sslTrustStorePassword" val="" />

			<!-- for example "PKCS12", "JKS", or "JCEKS" -->
			<setting name="sslTrustStoreType" val="" />

			<!-- for example "IBMJCE" or "IBMJCEFIPS" -->
			<setting name="sslTrustStoreProvider" val="" />

			<!-- A list of which ciphers are enabled. Values are dependent on the 
				provider, for example: SSL_RSA_WITH_AES_128_CBC_SHA;SSL_RSA_WITH_3DES_EDE_CBC_SHA -->
			<setting name="sslEnabledCipherSuites" val="" />

			<!-- Sets the algorithm that will be used to instantiate a KeyManagerFactory 
				object instead of using the default algorithm available in the platform. 
				Example values: "IbmX509" or "IBMJ9X509" -->
			<setting name="sslKeyManager" val="" />

			<!-- Sets the algorithm that will be used to instantiate a TrustManagerFactory 
				object instead of using the default algorithm available in the platform. 
				Example values: "PKIX" or "IBMJ9X509". -->
			<setting name="sslTrustManager" val="" />
		</section>
	</adapter-configuration>
</adapter-configurations>  